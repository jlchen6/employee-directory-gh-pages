{"version":3,"sources":["util/API.js","components/SearchForm/index.js","components/Col/index.js","components/Row/index.js","components/EmployeeCard/EmployeeCard.js","components/EmployeeHeader/EmployeeHeader.js","components/SearchResults/index.js","components/Button/index.js","pages/Directory.js","components/Footer/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchForm","props","className","htmlFor","value","search","onChange","handleInputChange","name","type","placeholder","id","Col","size","split","map","join","Row","fluid","EmployeeCard","alt","src","picture","phone","href","email","dob","toDateString","EmployeeHeader","SearchResults","results","result","key","thumbnail","first","last","Date","date","Button","children","onClick","Directory","state","employeeList","event","setState","target","filteredList","filter","employee","toLowerCase","indexOf","handleFormSubmit","preventDefault","sortByDOB","sortedList","sort","a","b","API","then","res","data","catch","err","console","log","this","Component","Footer","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.27a89105.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getRandomUsers: function(){\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n}","import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Employee Name:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"name\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Type in a name or part of a name to begin\"\n          id=\"name\"\n        />\n        {/* <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n          Search\n        </button> */}\n      </div>\n    </form>\n\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\r\nimport Col from \"../Col\";\r\nimport Row from \"../Row\";\r\n\r\nfunction EmployeeCard(props) {\r\n    return (\r\n        <Row>\r\n            <Col size = \"md-1\">\r\n                <img alt={props.name} src={props.picture} className=\"img-fluid\"/>\r\n            </Col>\r\n            <Col size = \"md-2\">\r\n                <p> {props.name} </p>\r\n            </Col>\r\n            <Col size = \"md-2\">\r\n                <p> {props.phone} </p>\r\n            </Col>\r\n            <Col size = \"md-4\">\r\n                <a href = {props.email}> {props.email} </a>\r\n            </Col>\r\n            <Col size = \"md-2\">\r\n                <p> {props.dob.toDateString()} </p>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default EmployeeCard;","import React from \"react\";\r\nimport Col from \"../Col\";\r\nimport Row from \"../Row\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeHeader() {\r\n    return (\r\n        <Row>\r\n            <Col size=\"md-1\">\r\n                <h4>Image</h4>\r\n            </Col>\r\n            <Col size=\"md-2\">\r\n                <h4>Name</h4>\r\n            </Col>\r\n            <Col size=\"md-2\">\r\n                <h4>Phone</h4>\r\n            </Col>\r\n            <Col size=\"md-4\">\r\n                <h4>Email</h4>\r\n            </Col>\r\n            <Col size=\"md-2\">\r\n                <h4>DOB</h4>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default EmployeeHeader;","import React from \"react\";\nimport \"./style.css\";\nimport EmployeeCard from \"../EmployeeCard/EmployeeCard\";\nimport EmployeeHeader from \"../EmployeeHeader/EmployeeHeader\";\n\nfunction SearchResults(props) {\n  return (\n    <ul className=\"list-group search-results\">\n      {/* First item in the list should be the header for the table */}\n      <li>\n        <EmployeeHeader/>\n      </li>\n      {/* For each employee in the results array, create an employee card to display their data */}\n      {props.results.map(result => (\n        <li key={result.id.value} className=\"list-group-item\">\n          {/* Pass in the employee data as props */}\n          <EmployeeCard\n            picture={result.picture.thumbnail} \n            name={result.name.first +\" \"+ result.name.last}\n            phone={result.phone}\n            email={result.email} \n            dob={new Date(result.dob.date)} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default SearchResults;\n","import React from \"react\";\nimport \"./style.css\"\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    <button onClick={onClick} className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\r\nimport API from \"../util/API\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResults from \"../components/SearchResults\";\r\nimport Button from \"../components/Button\"\r\n\r\nclass Directory extends Component {\r\n    // state for this component. \r\n    state = {\r\n        // search holds the string that users type into the search form\r\n        search: \"\",\r\n        // employeeList holds the full list of employees returned from the API call\r\n        employeeList: [],\r\n        // results holds the filtered/sorted list of employees\r\n        results: []\r\n    };\r\n\r\n    // When component mounts, get list of random users to display\r\n    componentDidMount() {\r\n        // call the api to populate the list of employees\r\n        API.getRandomUsers()\r\n            // Put the results from the API call into the employeeList, and display them in the Search Results section by populating the results array.\r\n            .then(res => this.setState({\r\n                results: res.data.results,\r\n                employeeList: res.data.results\r\n            }))\r\n            .catch(err => console.log(err))\r\n    };\r\n\r\n    // As the user types into the search bar, update the state to hold the search value \r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value });\r\n        // Filter the employeeList for employees whose name matches the searched string\r\n        var filteredList = this.state.employeeList.filter(employee => {\r\n            // create a string to hold the employee's full name, set to lowercase to avoid case matching\r\n            let employeeName = employee.name.first.toLowerCase() + \" \" + employee.name.last.toLowerCase();\r\n            // Return the boolean result of finding if the searched string can be found within this employee's full name\r\n            return employeeName.indexOf(this.state.search.toLowerCase()) !== -1\r\n        })\r\n        // Display the filtered list in the search results section\r\n        this.setState({ results: filteredList });\r\n    };\r\n\r\n    // When the user hits the submit button, search through the userList for names that match the searched string\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        // Filter the employeeList for employees whose name matches the searched string\r\n        var filteredList = this.state.employeeList.filter(employee => {\r\n            // create a string to hold the employee's full name, set to lowercase to avoid case matching\r\n            let employeeName = employee.name.first.toLowerCase() + \" \" + employee.name.last.toLowerCase();\r\n            // Return the boolean result of finding if the searched string can be found within this employee's full name\r\n            return employeeName.indexOf(this.state.search.toLowerCase()) !== -1\r\n        })\r\n        // Display the filtered list in the search results section\r\n        this.setState({ results: filteredList });\r\n    }\r\n\r\n    // sort the list of employees by date of birth\r\n    sortByDOB = event => {   \r\n        event.preventDefault();\r\n        // Create a variable to hold the sorted list\r\n        var sortedList = this.state.employeeList.sort((a, b) => {\r\n            // Compare each employee's dates of birth.\r\n            return (new Date(a.dob.date) > new Date(b.dob.date) ? 1 : -1)\r\n        })\r\n        // Display the sorted list in the search results section\r\n        this.setState({ results: sortedList })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchForm\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n                <Button onClick={this.sortByDOB}>Sort All by DOB</Button>\r\n                <SearchResults results={this.state.results} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Directory;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Employee Directory</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Header() {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <div className=\"navbar-brand\">\n        Employee Directory\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport Directory from './pages/Directory';\nimport Footer from \"./components/Footer\";\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Directory/>\n      <Footer/>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}